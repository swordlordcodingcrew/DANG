------------------------------------------------------------------------------------------------------
-- (c) 2021 by SwordLord - the coding crew
-- Add this script directly to your Aseprite Sprite Editor to export your sprites into
-- the grafic format used by the DANG framework as well as the 32blit sdk.
--
-- This file is part of the SwordLord DANG! Game Framework. DANG! is made for the 32blit Gaming Hardware.
------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------
-- Helper functions

-- This function returns the filename when given a complete path
function GetFilename(path)
    return string.match(path, "^.+/(.+)$")
end

------------------------------------------------------------------------------------------------------
-- Actual script

-- Make sure that there is an active image
local spr = app.activeSprite
if not spr then
  return app.alert("There is no active sprite")
end

-- make sure the image is in colormode indexed, having a palette
-- if not, this script tries to convert to indexed colours
local colorMode = spr.colorMode
if colorMode ~= ColorMode.INDEXED then
    -- todo: change mode only after asking the user and she says OK
    app.alert("Image does not have indexed colours. Trying to change that. Make sure to save the image afterwards if you want to keep changes.")
    app.command.ChangePixelFormat{ format="indexed", dithering="none" }
end

-- make sure there is an active image
local img = app.activeImage
if not img then
    return app.alert("There is no active image")
end

-- todo: make sure that there is only one palette or ask the user
local palette = spr.palettes[1]

-- how many colours are there in the palette?
local colourCount = #palette
--app.alert(ncolors)

-- todo: ask the user what name she wants to store the export under
-- only do so if there is no parameter output_file

local outfile = spr.filename .. ".h" -- :split(".")[1]

if app.params["output_file"] ~= nil then
    outfile = app.params["output_file"]
end

-- prepare file to be written into
local f = io.open(outfile, "w")
io.output(f)

-- set symbol name
-- todo: choose something sensible here. like file name without path or such
local symbol_name = outfile
if app.params["output_file"] == nil then
    -- this is a bit of a hack, since we assume that if output_file was not set
    -- with a parameter, symbol name will contain a full path otherwise
    symbol_name = GetFilename(symbol_name)
end

if app.params["symbol_name"] ~= nil then
    symbol_name = app.params["symbol_name"]
end

-- append standard header
io.write("// This file is auto generated by the SwordLord DANG Aseprite Exporter.\n")
io.write("// It will get overwritten once you re-export your sprites!\n")
io.write("// (c) 2021 by SwordLord - the coding crew\n")
io.write("\n")
io.write("#include <32blit.hpp>\n")
io.write("#include <ImageImport.h>\n")
io.write("\n")

-- data static array
io.write(string.format("static const uint8_t %s_data[] = \n", symbol_name))
io.write("\t{\n\t\t")

local counter = 0
local counterMax = (img.height) * (img.width)

for h = 0, img.height-1, 1 do
    for w = 0, img.width-1, 1 do

        if counter >= counterMax-1 then
            -- last line, no comma
            io.write(string.format("%d", img:getPixel(w, h)))
        else
            io.write(string.format("%d,", img:getPixel(w, h)))
        end

	    counter = counter + 1
        if counter % 40 == 0 and counter < counterMax-1 then
            io.write("\n\t\t")
        end
    end
end
io.write("\n\t};\n")


-- palette static array
io.write(string.format("static const blit::Pen %s_palette[] = \n", symbol_name))
io.write("\t{\n")

local iPaletteCount = #palette

for i = 0,iPaletteCount-1 do
  	local color = palette:getColor(i)
  	--print("r:" .. color.red .. " g:" .. color.green .." b:" .. color.blue .. " a:" .. color.alpha )
	if i < iPaletteCount-1 then
		io.write(string.format("\t\t{%d, %d, %d, %d},\n", color.red, color.green, color.blue, color.alpha))
	else
		-- last line, no comma
		io.write(string.format("\t\t{%d, %d, %d, %d}\n", color.red, color.green, color.blue, color.alpha))
	end
end
io.write("\n\t};\n\n\n")


-- fill the struct
io.write(string.format("static dang::image_import %s\n", symbol_name))
io.write("{\n")

-- alpha
io.write(string.format("\t.alpha = %d,\n", 255))
-- bounds
io.write(string.format("\t.bounds = {%d, %d},\n", spr.width, spr.height))
-- palette
io.write(string.format("\t.palette = %s_palette,\n", symbol_name))
-- data
io.write(string.format("\t.data = %s_data\n", symbol_name))

io.write("};\n")
io.write("\n")
io.write("// EOF\n")

io.close(f)

print("Written your file to: " .. outfile)
